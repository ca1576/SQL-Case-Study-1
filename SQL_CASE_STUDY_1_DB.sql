CREATE DATABASE SQL_CASE_STUDY_1_DB

USE SQL_CASE_STUDY_1_DB

--- 1.  Display the number of states present in theLocationTable

SELECT COUNT(DISTINCT(STATE)) COUNT_OF_UNIQUE_STATES
FROM LOCATION

--- 2. How many products are of regular type?

SELECT COUNT(PRODUCT) FROM PRODUCT WHERE Type = 'Regular'

--- 3. How much spending has been done on marketing of product ID 1?

SELECT SUM(MARKETING) AS 'SPENDING DONE ON MARKETING' FROM FACT
WHERE ProductId = 1

--- 4. What is the minimum sales of a product?

SELECT MIN(SALES) MIN_SALES FROM FACT

SELECT * FROM FACT
WHERE SALES 
IN (SELECT MIN(SALES) FROM FACT)

--- 5. Display the max Cost of Good Sold (COGS).

SELECT MAX(COGS) AS MAX_COGS FROM FACT

--- 6. Display the details of the product where product type is coffee.

SELECT * FROM PRODUCT WHERE Product_Type = 'Coffee'

--- 7. Display the details where total expenses are greater than 40.

SELECT * FROM FACT 
WHERE Total_Expenses > 40 

--- 8. What is the average sales in area code 719?

SELECT AVG(SALES) AS AVERAGE_SALES_719 FROM FACT
WHERE Area_Code = 719

--- 9. Find out the total profit generated by Colorado state

SELECT SUM(PROFIT) PROFIT_GENERATED_BY_COLORADO FROM LOCATION L
INNER JOIN
FACT F
ON L.Area_Code = F.Area_Code
WHERE State = 'COLORADO'

--- 10. Display the average inventory for each product ID.

SELECT PRODUCTID, AVG(INVENTORY) AVERAGE_INVENTORY FROM FACT
GROUP BY PRODUCTID
ORDER BY AVERAGE_INVENTORY DESC

--- 11. Display state in a sequential order in a Location Table.

SELECT * FROM Location
ORDER BY State

SELECT DISTINCT(STATE) FROM Location
ORDER BY State DESC

--- 12. Display the average budget of the Product where the average budget 
---     margin should be greater than 100.

SELECT AVG(BUDGET_MARGIN) AS AVG_BUDGET_GRTR_THAN_100 ,ProductId FROM FACT
GROUP BY ProductId
HAVING AVG(BUDGET_MARGIN) > 100

--- 13. What is the total sales done on date 2010-01-01?

SELECT SUM(SALES) AS TOTAL_SALES FROM FACT
WHERE DATE='2010-01-01'

--- 14. Display the average total expense of each product ID on an individual date

SELECT DATE , ProductId , AVG(TOTAL_EXPENSES) AVERAGE_OF_TOTAL_EXPENSES FROM FACT
GROUP BY DATE,ProductId
WITH ROLLUP

SELECT AVG(TOTAL_EXPENSES) FROM FACT

--- 15.  Display the table with the following attributes such as date, productID,
---      product_type, product, sales, profit, state, area_code.

SELECT DATE,F.ProductId,Product_Type,Product,Sales,Profit,L.State,F.Area_Code FROM FACT F
JOIN PRODUCT P 
ON F.ProductId = P.ProductId 
JOIN Location L
ON F.AREA_CODE = L.AREA_CODE

SELECT * FROM PRODUCT

SELECT * FROM LOCATION

--- 16. Display the rank without any gap to show the sales wiserank.

SELECT SALES, DENSE_RANK() OVER(ORDER BY SALES DESC) FROM FACT

--- 17. Find the state wise profit and sales.

SELECT L.STATE, SUM(F.SALES) TOTAL_SALES_STATE_WISE,SUM(F.PROFIT) TOTAL_PROFIT_STATE_WISE FROM FACT F
JOIN Location L
ON F.Area_Code = L.Area_Code
GROUP BY L.State

--- 18. Find the state wise profit and sales along with the productname.

SELECT L.State,P.Product, SUM(F.SALES) TOTAL_SALES_STATE_WISE,SUM(F.PROFIT) TOTAL_PROFIT_STATE_WISE FROM FACT F
JOIN Location L
ON F.Area_Code = L.Area_Code
JOIN Product P
ON F.ProductId = P.ProductId
GROUP BY L.State, P.Product
WITH ROLLUP

--- 19.  If there is an increase in sales of 5%, calculate the increased sales.

SELECT *, (SALES*0.05 + Sales) SALES_INCREASED_5 FROM FACT 

--- 20.  Find the maximum profit along with the product ID and product type.

SELECT P.PRODUCT_TYPE,P.ProductId, MAX(F.PROFIT) MAX_PROFIT FROM fact F
JOIN Product P
ON F.ProductId = P.ProductId
GROUP BY P.PRODUCT_TYPE,P.ProductId

--- 21.  Create a stored procedure to fetch the result according to theproduct type
 ---     from ProductTable

 CREATE PROCEDURE FETCH_RESULT
 AS
   SELECT * FROM Product 
   WHERE ProductId = 1
GO

EXEC FETCH_RESULT

--- 22. Write a query by creating a condition in which if the total expenses isless than
---     60 then it is a profit or else loss.

ALTER TABLE FACT
ADD PROFITorLOSS VARCHAR(6)
 
SELECT * FROM fact

UPDATE fact
SET 
PROFITorLOSS = 'PROFIT'
WHERE Total_Expenses < 60

UPDATE fact
SET 
PROFITorLOSS = 'LOSS'
WHERE Total_Expenses > 60

--- 23. Give the total weekly sales value with the date and product IDdetails. Use
---     roll-up to pull the data in hierarchical order.

SELECT DATE,ProductId,SUM(Sales) FROM FACT
GROUP BY DATE,ProductId
WITH ROLLUP

--- 24.  Apply union and intersection operator on the tables which consist of
---      attribute area code.

CREATE VIEW FACT_WHERE_LOSS
AS
SELECT * FROM FACT 
WHERE PROFITorLOSS = 'LOSS'

SELECT * FROM FACT
UNION
SELECT * FROM FACT_WHERE_LOSS

SELECT * FROM FACT
INTERSECT
SELECT * FROM FACT_WHERE_LOSS

--- 25. Create a user-defined function for the product table to fetch a particular
---     product type based upon the user’s preference.

CREATE FUNCTION PARTICULAR_PRODUCT_TYPE (@P_TYPE VARCHAR(15))
RETURNS TABLE AS
RETURN SELECT * FROM Product
       WHERE Product_Type = @P_TYPE

SELECT * FROM PARTICULAR_PRODUCT_TYPE('COFFEE')

--- 26. Change the product type from coffee to tea where product ID is 1 and undo it.

SELECT * FROM Product

BEGIN TRANSACTION UPDATE_PROD_TYPE
UPDATE Product
SET Product_Type = 'Tea'
WHERE ProductId = 1

ROLLBACK TRANSACTION UPDATE_PROD_TYPE

--- 27. Display the date, product ID and sales where total expenses are
---     between 100 to 200.

SELECT Date,ProductId,Sales,Total_Expenses FROM fact
WHERE Total_Expenses 
BETWEEN
100 AND 200

--- 28. Delete the records in the Product Table for regular type.

SELECT * FROM Product

DELETE Product
WHERE Type = 'REGULAR'

--- 29.  Display the ASCII value of the fifth character from the column Product.

SELECT PRODUCT , SUBSTRING(PRODUCT,5,1) FIFTH_CHARACTER , ASCII(SUBSTRING(PRODUCT,5,1)) AS ASCII_VALUES_OF_FIFTH_CHAR FROM Product
